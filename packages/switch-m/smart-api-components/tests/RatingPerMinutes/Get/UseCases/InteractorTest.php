<?php

namespace Switchm\SmartApi\Components\Tests\RatingPerMinutes\Get\UseCases;

use Carbon\Carbon;
use Prophecy\Argument as arg;
use ReflectionClass;
use ReflectionException;
use Smart2\Application\Services\SearchConditionTextAppService;
use Switchm\SmartApi\Components\Common\RatingPoint;
use Switchm\SmartApi\Components\RatingPerMinutes\Get\UseCases\InputData;
use Switchm\SmartApi\Components\RatingPerMinutes\Get\UseCases\Interactor;
use Switchm\SmartApi\Components\RatingPerMinutes\Get\UseCases\OutputBoundary;
use Switchm\SmartApi\Components\RatingPerMinutes\Get\UseCases\OutputData;
use Switchm\SmartApi\Components\Tests\TestCase;
use Switchm\SmartApi\Queries\Dao\Dwh\PerMinutesDao;
use Switchm\SmartApi\Queries\Dao\Rdb\PerMinutesDao as RdbPerMinutesDao;
use Switchm\SmartApi\Queries\Services\DivisionService;
use Switchm\SmartApi\Queries\Services\HolidayService;
use Switchm\SmartApi\Queries\Services\SampleService;

class InteractorTest extends TestCase
{
    private $perMinutesDao;

    private $rdbPerMinutesDao;

    private $divisionService;

    private $sampleService;

    private $holidayService;

    private $ratingPoint;

    private $searchConditionTextAppService;

    private $outputBoundary;

    private $target;

    public function setUp(): void
    {
        parent::setUp();

        Carbon::setTestNow(new Carbon('2019-01-01 10:00:00'));

        $this->perMinutesDao = $this->prophesize(PerMinutesDao::class);
        $this->rdbPerMinutesDao = $this->prophesize(RdbPerMinutesDao::class);
        $this->divisionService = $this->prophesize(DivisionService::class);
        $this->sampleService = $this->prophesize(SampleService::class);
        $this->holidayService = $this->prophesize(HolidayService::class);
        $this->ratingPoint = $this->prophesize(RatingPoint::class);

        $this->outputBoundary = $this->prophesize(OutputBoundary::class);
        $this->searchConditionTextAppService = $this->prophesize(SearchConditionTextAppService::class);

        $this->target = new Interactor(
            $this->perMinutesDao->reveal(),
            $this->rdbPerMinutesDao->reveal(),
            $this->divisionService->reveal(),
            $this->sampleService->reveal(),
            $this->holidayService->reveal(),
            $this->ratingPoint->reveal(),
            $this->searchConditionTextAppService->reveal(),
            $this->outputBoundary->reveal()
        );
    }

    public function tearDown(): void
    {
        parent::tearDown();
        Carbon::setTestNow();
    }

    /**
     * @test
     * @dataProvider convertCsvDataProvider
     * @param $convertData
     * @param $displayType
     * @param $channelIds
     * @param $dateList
     * @param $expected
     * @throws ReflectionException
     */
    public function convertCsvData($convertData, $displayType, $channelIds, $dateList, $expected): void
    {
        $reflection = new ReflectionClass($this->target);
        $method = $reflection->getMethod('convertCsvData');
        $method->setAccessible(true);

        $actual = $method->invoke($this->target, $convertData, $displayType, $channelIds, $dateList);

        $this->assertSame($expected, $actual);
    }

    public function convertCsvDataProvider()
    {
        return [
            [[], '', [], [], []],
            [['test' => ['test']], 'dateBy', [1, 2, 3], [['test' => '20190101']], [['test', '']]],
            [['test' => ['test']], 'aaa', [1, 2, 3], [['test' => '20190101']], [[null, null, '', null, '', null, '']]],
        ];
    }

    /**
     * @test
     * @dataProvider createTableDataProvider
     * @param $data
     * @param $dataDivision
     * @param $csvFlag
     * @param $limit
     * @param $channelType
     * @param mixed $expected
     * @throws ReflectionException
     */
    public function createTableData($data, $dataDivision, $csvFlag, $channelType, $expected): void
    {
        $reflection = new ReflectionClass($this->target);
        $method = $reflection->getMethod('createTableData');
        $method->setAccessible(true);

        $actual = $method->invoke($this->target, $data, [1, 2, 3], 'viewing_rate', $dataDivision, $csvFlag, '6', $channelType);

        $this->assertSame($expected, $actual);
    }

    public function createTableDataProvider()
    {
        return [
            [[], 'dataDivision', '0', 'dt1', [
                ['minute' => '00', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '01', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '02', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '03', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '04', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '05', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '06', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '07', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '08', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '09', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '10', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '11', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '12', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '13', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '14', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '15', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '16', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '17', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '18', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '19', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '20', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '21', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '22', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '23', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '24', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '25', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '26', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '27', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '28', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '29', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '30', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '31', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '32', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '33', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '34', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '35', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '36', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '37', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '38', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '39', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '40', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '41', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '42', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '43', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '44', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '45', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '46', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '47', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '48', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '49', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '50', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '51', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '52', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '53', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '54', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '55', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '56', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '57', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '58', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '59', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => 'Av', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
            ]],
            [[['channel_id' => '1', 'dow' => '1', 'mm' => '1']], 'test', '1', 'bs1', [
                ['minute' => '6:00', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:01', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:02', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:03', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:04', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:05', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:06', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:07', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:08', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:09', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:10', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:11', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:12', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:13', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:14', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:15', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:16', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:17', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:18', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:19', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:20', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:21', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:22', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:23', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:24', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:25', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:26', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:27', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:28', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:29', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:30', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:31', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:32', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:33', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:34', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:35', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:36', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:37', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:38', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:39', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:40', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:41', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:42', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:43', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:44', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:45', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:46', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:47', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:48', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:49', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:50', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:51', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:52', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:53', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:54', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:55', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:56', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:57', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:58', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '6:59', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => 'AVG', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
            ]],
            [[['channel_id' => '1', 'dow' => '1', 'mm' => '01', 'viewing_rate' => 0.5]], 'viewing_rate', 'test', 'bs1', [
                ['minute' => '00', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '01', 11 => 0.5, 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '02', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '03', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '04', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '05', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '06', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '07', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '08', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '09', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '10', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '11', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '12', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '13', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '14', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '15', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '16', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '17', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '18', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '19', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '20', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '21', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '22', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '23', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '24', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '25', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '26', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '27', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '28', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '29', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '30', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '31', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '32', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '33', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '34', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '35', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '36', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '37', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '38', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '39', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '40', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '41', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '42', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '43', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '44', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '45', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '46', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '47', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '48', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '49', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '50', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '51', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '52', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '53', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '54', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '55', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '56', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '57', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '58', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => '59', 11 => '', 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
                ['minute' => 'Av', 11 => 0.5, 21 => '', 31 => '', 12 => '', 22 => '', 32 => '', 13 => '', 23 => '', 33 => '', 14 => '', 24 => '', 34 => '', 15 => '', 25 => '', 35 => '', 16 => '', 26 => '', 36 => '', 10 => '', 20 => '', 30 => ''],
            ]],
        ];
    }

    /**
     * @test
     * @dataProvider avgHashExistsDataProvider
     * @param $avgHash
     * @param $expected
     * @throws ReflectionException
     */
    public function avgHashExists($avgHash, $expected): void
    {
        $channel = 'channel';
        $dow = 'dow';
        $key = 'key';

        $reflection = new ReflectionClass($this->target);
        $method = $reflection->getMethod('avgHashExists');
        $method->setAccessible(true);

        $actual = $method->invoke($this->target, $avgHash, $channel, $dow, $key);

        $this->assertSame($expected, $actual);
    }

    public function avgHashExistsDataProvider()
    {
        return [
            [[], false],
            [['channel' => []], false],
            [['channel' => ['dow' => []]], false],
            [['channel' => ['dow' => ['key' => []]]], true],
            [['channel' => ['dow' => ['key' => ['test']]]], true],
        ];
    }

    /**
     * @test
     * @throws ReflectionException
     */
    public function getRatingData_no_call_method(): void
    {
        $startDateTime = new Carbon();
        $endDateTime = new Carbon();
        $period = [];
        $channelType = '';
        $channelIds = [];
        $division = 'ga8';
        $code = 'personal';
        $hour = '1';
        $dataDivision = '';
        $conditionCross = [];
        $isOriginal = false;
        $regionId = 1;
        $intervalHourly = 100;
        $intervalMinutes = 60;

        $this->rdbPerMinutesDao
            ->getRatingData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->perMinutesDao
            ->getRatingData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $expected = [];

        $reflection = new ReflectionClass($this->target);
        $method = $reflection->getMethod('getRatingData');
        $method->setAccessible(true);

        $actual = $method->invoke($this->target, $startDateTime, $endDateTime, $period, $channelType, $channelIds, $division, $code, $hour, $dataDivision, $conditionCross, $isOriginal, $regionId, $intervalHourly, $intervalMinutes);

        $this->assertSame($expected, $actual);
    }

    /**
     * @test
     * @throws ReflectionException
     */
    public function getRatingData_rdb(): void
    {
        $startDateTime = new Carbon();
        $endDateTime = new Carbon();
        $period = ['isRdb' => true];
        $channelType = '';
        $channelIds = [];
        $division = 'ga8';
        $code = 'personal';
        $hour = '1';
        $dataDivision = '';
        $conditionCross = [];
        $isOriginal = false;
        $regionId = 1;
        $intervalHourly = 100;
        $intervalMinutes = 60;

        $this->rdbPerMinutesDao
            ->getRatingData(arg::cetera())
            ->willReturn([])
            ->shouldBeCalled();

        $this->perMinutesDao
            ->getRatingData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $expected = [];

        $reflection = new ReflectionClass($this->target);
        $method = $reflection->getMethod('getRatingData');
        $method->setAccessible(true);

        $actual = $method->invoke($this->target, $startDateTime, $endDateTime, $period, $channelType, $channelIds, $division, $code, $hour, $dataDivision, $conditionCross, $isOriginal, $regionId, $intervalHourly, $intervalMinutes);

        $this->assertSame($expected, $actual);
    }

    /**
     * @test
     * @throws ReflectionException
     */
    public function getRatingData_dwh(): void
    {
        $startDateTime = new Carbon();
        $endDateTime = new Carbon();
        $period = ['isDwh' => true];
        $channelType = '';
        $channelIds = [];
        $division = 'ga8';
        $code = 'personal';
        $hour = '1';
        $dataDivision = '';
        $conditionCross = [];
        $isOriginal = false;
        $regionId = 1;
        $intervalHourly = 100;
        $intervalMinutes = 60;

        $this->rdbPerMinutesDao
            ->getRatingData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->perMinutesDao
            ->getRatingData(arg::cetera())
            ->willReturn([])
            ->shouldBeCalled();

        $expected = [];

        $reflection = new ReflectionClass($this->target);
        $method = $reflection->getMethod('getRatingData');
        $method->setAccessible(true);

        $actual = $method->invoke($this->target, $startDateTime, $endDateTime, $period, $channelType, $channelIds, $division, $code, $hour, $dataDivision, $conditionCross, $isOriginal, $regionId, $intervalHourly, $intervalMinutes);

        $this->assertSame($expected, $actual);
    }

    /**
     * @test
     * @throws ReflectionException
     */
    public function getShareData_no_call_method(): void
    {
        $startDateTime = new Carbon();
        $endDateTime = new Carbon();
        $period = [];
        $channelType = '';
        $channelIds = [];
        $division = 'ga8';
        $code = 'personal';
        $hour = '1';
        $dataDivision = '';
        $conditionCross = [];
        $isOriginal = false;
        $regionId = 1;
        $intervalHourly = 100;
        $intervalMinutes = 60;

        $this->rdbPerMinutesDao
            ->getShareData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->perMinutesDao
            ->getShareData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $expected = [];

        $reflection = new ReflectionClass($this->target);
        $method = $reflection->getMethod('getShareData');
        $method->setAccessible(true);

        $actual = $method->invoke($this->target, $startDateTime, $endDateTime, $period, $channelType, $channelIds, $division, $code, $hour, $dataDivision, $conditionCross, $isOriginal, $regionId, $intervalHourly, $intervalMinutes);

        $this->assertSame($expected, $actual);
    }

    /**
     * @test
     * @throws ReflectionException
     */
    public function getShareData_rdb(): void
    {
        $startDateTime = new Carbon();
        $endDateTime = new Carbon();
        $period = ['isRdb' => true];
        $channelType = '';
        $channelIds = [];
        $division = 'ga8';
        $code = 'personal';
        $hour = '1';
        $dataDivision = '';
        $conditionCross = [];
        $isOriginal = false;
        $regionId = 1;
        $intervalHourly = 100;
        $intervalMinutes = 60;

        $this->rdbPerMinutesDao
            ->getShareData(arg::cetera())
            ->willReturn([])
            ->shouldBeCalled();

        $this->perMinutesDao
            ->getShareData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $expected = [];

        $reflection = new ReflectionClass($this->target);
        $method = $reflection->getMethod('getShareData');
        $method->setAccessible(true);

        $actual = $method->invoke($this->target, $startDateTime, $endDateTime, $period, $channelType, $channelIds, $division, $code, $hour, $dataDivision, $conditionCross, $isOriginal, $regionId, $intervalHourly, $intervalMinutes);

        $this->assertSame($expected, $actual);
    }

    /**
     * @test
     * @throws ReflectionException
     */
    public function getShareData_dwh(): void
    {
        $startDateTime = new Carbon();
        $endDateTime = new Carbon();
        $period = ['isDwh' => true];
        $channelType = '';
        $channelIds = [];
        $division = 'ga8';
        $code = 'personal';
        $hour = '1';
        $dataDivision = '';
        $conditionCross = [];
        $isOriginal = false;
        $regionId = 1;
        $intervalHourly = 100;
        $intervalMinutes = 60;

        $this->rdbPerMinutesDao
            ->getShareData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->perMinutesDao
            ->getShareData(arg::cetera())
            ->willReturn([])
            ->shouldBeCalled();

        $expected = [];

        $reflection = new ReflectionClass($this->target);
        $method = $reflection->getMethod('getShareData');
        $method->setAccessible(true);

        $actual = $method->invoke($this->target, $startDateTime, $endDateTime, $period, $channelType, $channelIds, $division, $code, $hour, $dataDivision, $conditionCross, $isOriginal, $regionId, $intervalHourly, $intervalMinutes);

        $this->assertSame($expected, $actual);
    }

    /**
     * @test
     * @throws ReflectionException
     */
    public function getTargetData_no_call_method(): void
    {
        $startDateTime = new Carbon();
        $endDateTime = new Carbon();
        $period = [];
        $channelType = '';
        $channelIds = [];
        $division = 'ga8';
        $code = 'personal';
        $hour = '1';
        $dataDivision = '';
        $conditionCross = [];
        $isOriginal = false;
        $regionId = 1;
        $intervalHourly = 100;
        $intervalMinutes = 60;

        $this->rdbPerMinutesDao
            ->getTargetData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->perMinutesDao
            ->getTargetData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $expected = [];

        $reflection = new ReflectionClass($this->target);
        $method = $reflection->getMethod('getTargetData');
        $method->setAccessible(true);

        $actual = $method->invoke($this->target, $startDateTime, $endDateTime, $period, $channelType, $channelIds, $division, $code, $hour, $dataDivision, $conditionCross, $isOriginal, $regionId, $intervalHourly, $intervalMinutes);

        $this->assertSame($expected, $actual);
    }

    /**
     * @test
     * @throws ReflectionException
     */
    public function getTargetData_rdb(): void
    {
        $startDateTime = new Carbon();
        $endDateTime = new Carbon();
        $period = ['isRdb' => true];
        $channelType = '';
        $channelIds = [];
        $division = 'ga8';
        $code = 'personal';
        $hour = '1';
        $dataDivision = '';
        $conditionCross = [];
        $isOriginal = false;
        $regionId = 1;
        $intervalHourly = 100;
        $intervalMinutes = 60;

        $this->rdbPerMinutesDao
            ->getTargetData(arg::cetera())
            ->willReturn([])
            ->shouldBeCalled();

        $this->perMinutesDao
            ->getTargetData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $expected = [];

        $reflection = new ReflectionClass($this->target);
        $method = $reflection->getMethod('getTargetData');
        $method->setAccessible(true);

        $actual = $method->invoke($this->target, $startDateTime, $endDateTime, $period, $channelType, $channelIds, $division, $code, $hour, $dataDivision, $conditionCross, $isOriginal, $regionId, $intervalHourly, $intervalMinutes);

        $this->assertSame($expected, $actual);
    }

    /**
     * @test
     * @throws ReflectionException
     */
    public function getTargetData_dwh(): void
    {
        $startDateTime = new Carbon();
        $endDateTime = new Carbon();
        $period = ['isDwh' => true];
        $channelType = '';
        $channelIds = [];
        $division = 'ga8';
        $code = 'personal';
        $hour = '1';
        $dataDivision = '';
        $conditionCross = [];
        $isOriginal = false;
        $regionId = 1;
        $intervalHourly = 100;
        $intervalMinutes = 60;

        $this->rdbPerMinutesDao
            ->getTargetData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->perMinutesDao
            ->getTargetData(arg::cetera())
            ->willReturn([])
            ->shouldBeCalled();

        $expected = [];

        $reflection = new ReflectionClass($this->target);
        $method = $reflection->getMethod('getTargetData');
        $method->setAccessible(true);

        $actual = $method->invoke($this->target, $startDateTime, $endDateTime, $period, $channelType, $channelIds, $division, $code, $hour, $dataDivision, $conditionCross, $isOriginal, $regionId, $intervalHourly, $intervalMinutes);

        $this->assertSame($expected, $actual);
    }

    /**
     * @test
     * @throws ReflectionException
     */
    public function getHeader_csv(): void
    {
        $isCsvFlag = '1';
        $params = [];
        $expected = [];

        $this->searchConditionTextAppService
            ->getRatingCsv(arg::cetera())
            ->willReturn([])
            ->shouldBeCalled();

        $this->searchConditionTextAppService
            ->getRatingHeader(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $reflection = new ReflectionClass($this->target);
        $method = $reflection->getMethod('getHeader');
        $method->setAccessible(true);

        $actual = $method->invoke($this->target, $isCsvFlag, $params);

        $this->assertSame($expected, $actual);
    }

    /**
     * @test
     * @throws ReflectionException
     */
    public function getHeader(): void
    {
        $isCsvFlag = '0';
        $params = [];
        $expected = [];

        $this->searchConditionTextAppService
            ->getRatingCsv(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->searchConditionTextAppService
            ->getRatingHeader(arg::cetera())
            ->willReturn([])
            ->shouldBeCalled();

        $reflection = new ReflectionClass($this->target);
        $method = $reflection->getMethod('getHeader');
        $method->setAccessible(true);

        $actual = $method->invoke($this->target, $isCsvFlag, $params);

        $this->assertSame($expected, $actual);
    }

    /**
     * @test
     */
    public function invoke_RatingData(): void
    {
        $this->ratingPoint
            ->initDate(arg::cetera())
            ->willReturn([new Carbon('2019-01-01 05:00:00'), new Carbon('2019-01-07 04:59:59'), new Carbon('2019-01-01 05:00:00'), new Carbon('2019-01-07 04:59:59')])
            ->shouldBeCalled();

        $this->ratingPoint
            ->getChannelIds(arg::cetera())
            ->willReturn([])
            ->shouldBeCalled();

        $this->perMinutesDao
            ->getRatingData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->rdbPerMinutesDao
            ->getRatingData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->perMinutesDao
            ->getShareData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->rdbPerMinutesDao
            ->getShareData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->perMinutesDao
            ->getTargetData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->rdbPerMinutesDao
            ->getTargetData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->divisionService
            ->getCodeList(arg::cetera())
            ->willReturn([])
            ->shouldBeCalled();

        $this->holidayService
            ->getDateList(arg::cetera(arg::cetera()))
            ->willReturn([])
            ->shouldBeCalled();

        $output = new OutputData(
            [
                ['minute' => '00'],
                ['minute' => '01'],
                ['minute' => '02'],
                ['minute' => '03'],
                ['minute' => '04'],
                ['minute' => '05'],
                ['minute' => '06'],
                ['minute' => '07'],
                ['minute' => '08'],
                ['minute' => '09'],
                ['minute' => '10'],
                ['minute' => '11'],
                ['minute' => '12'],
                ['minute' => '13'],
                ['minute' => '14'],
                ['minute' => '15'],
                ['minute' => '16'],
                ['minute' => '17'],
                ['minute' => '18'],
                ['minute' => '19'],
                ['minute' => '20'],
                ['minute' => '21'],
                ['minute' => '22'],
                ['minute' => '23'],
                ['minute' => '24'],
                ['minute' => '25'],
                ['minute' => '26'],
                ['minute' => '27'],
                ['minute' => '28'],
                ['minute' => '29'],
                ['minute' => '30'],
                ['minute' => '31'],
                ['minute' => '32'],
                ['minute' => '33'],
                ['minute' => '34'],
                ['minute' => '35'],
                ['minute' => '36'],
                ['minute' => '37'],
                ['minute' => '38'],
                ['minute' => '39'],
                ['minute' => '40'],
                ['minute' => '41'],
                ['minute' => '42'],
                ['minute' => '43'],
                ['minute' => '44'],
                ['minute' => '45'],
                ['minute' => '46'],
                ['minute' => '47'],
                ['minute' => '48'],
                ['minute' => '49'],
                ['minute' => '50'],
                ['minute' => '51'],
                ['minute' => '52'],
                ['minute' => '53'],
                ['minute' => '54'],
                ['minute' => '55'],
                ['minute' => '56'],
                ['minute' => '57'],
                ['minute' => '58'],
                ['minute' => '59'],
                ['minute' => 'Av'],
            ],
            '1',
            61,
            61,
            [],
            'dt1',
            '',
            '',
            '20190101',
            '20190107',
            []
        );

        $this->outputBoundary
            ->__invoke($output)
            ->shouldBeCalled();

        $this->searchConditionTextAppService
            ->getRatingCsv(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->searchConditionTextAppService
            ->getRatingHeader(arg::cetera())
            ->willReturn([])
            ->shouldBeCalled();

        $startDateTime = '2019-01-01 05:00:00';
        $endDateTime = '2019-01-07 04:59:59';
        $regionId = '1';
        $channels = [1, 2, 3];
        $channelType = 'dt1';
        $division = 'ga8';
        $conditionCross = [];
        $csvFlag = '0';
        $draw = '1';
        $code = 'personal';
        $dataDivision = 'viewing_rate';
        $dataType = '0';
        $displayType = '';
        $aggregateType = '';
        $hour = 1;
        $sampleCountMaxNumber = 50;
        $userId = 1;
        $rdbDwhSearchPeriod = [];
        $baseDivision = [
            'ga8',
            'ga12',
            'ga10s',
            'gm',
            'oc',
        ];
        $intervalHourly = 100;
        $intervalMinutes = 60;

        $inputData = new InputData(
            $startDateTime,
            $endDateTime,
            $regionId,
            $channels,
            $channelType,
            $division,
            $conditionCross,
            $csvFlag,
            $draw,
            $code,
            $dataDivision,
            $dataType,
            $displayType,
            $aggregateType,
            $hour,
            $sampleCountMaxNumber,
            $userId,
            $rdbDwhSearchPeriod,
            $baseDivision,
            $intervalHourly,
            $intervalMinutes
        );

        $this->target->__invoke($inputData);
    }

    /**
     * @test
     */
    public function invoke_getShareData(): void
    {
        $this->ratingPoint
            ->initDate(arg::cetera())
            ->willReturn([new Carbon('2019-01-01 05:00:00'), new Carbon('2019-01-07 04:59:59'), new Carbon('2019-01-01 05:00:00'), new Carbon('2019-01-07 04:59:59')])
            ->shouldBeCalled();

        $this->ratingPoint
            ->getChannelIds(arg::cetera())
            ->willReturn([])
            ->shouldBeCalled();

        $this->perMinutesDao
            ->getRatingData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->rdbPerMinutesDao
            ->getRatingData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->perMinutesDao
            ->getShareData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->rdbPerMinutesDao
            ->getShareData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->perMinutesDao
            ->getTargetData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->rdbPerMinutesDao
            ->getTargetData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->divisionService
            ->getCodeList(arg::cetera())
            ->willReturn([])
            ->shouldBeCalled();

        $this->holidayService
            ->getDateList(arg::cetera(arg::cetera()))
            ->willReturn([])
            ->shouldBeCalled();

        $output = new OutputData(
            [
                ['minute' => '00'],
                ['minute' => '01'],
                ['minute' => '02'],
                ['minute' => '03'],
                ['minute' => '04'],
                ['minute' => '05'],
                ['minute' => '06'],
                ['minute' => '07'],
                ['minute' => '08'],
                ['minute' => '09'],
                ['minute' => '10'],
                ['minute' => '11'],
                ['minute' => '12'],
                ['minute' => '13'],
                ['minute' => '14'],
                ['minute' => '15'],
                ['minute' => '16'],
                ['minute' => '17'],
                ['minute' => '18'],
                ['minute' => '19'],
                ['minute' => '20'],
                ['minute' => '21'],
                ['minute' => '22'],
                ['minute' => '23'],
                ['minute' => '24'],
                ['minute' => '25'],
                ['minute' => '26'],
                ['minute' => '27'],
                ['minute' => '28'],
                ['minute' => '29'],
                ['minute' => '30'],
                ['minute' => '31'],
                ['minute' => '32'],
                ['minute' => '33'],
                ['minute' => '34'],
                ['minute' => '35'],
                ['minute' => '36'],
                ['minute' => '37'],
                ['minute' => '38'],
                ['minute' => '39'],
                ['minute' => '40'],
                ['minute' => '41'],
                ['minute' => '42'],
                ['minute' => '43'],
                ['minute' => '44'],
                ['minute' => '45'],
                ['minute' => '46'],
                ['minute' => '47'],
                ['minute' => '48'],
                ['minute' => '49'],
                ['minute' => '50'],
                ['minute' => '51'],
                ['minute' => '52'],
                ['minute' => '53'],
                ['minute' => '54'],
                ['minute' => '55'],
                ['minute' => '56'],
                ['minute' => '57'],
                ['minute' => '58'],
                ['minute' => '59'],
                ['minute' => 'Av'],
            ],
            '1',
            61,
            61,
            [],
            'dt1',
            '',
            '',
            '20190101',
            '20190107',
            []
        );

        $this->outputBoundary
            ->__invoke($output)
            ->shouldBeCalled();

        $this->searchConditionTextAppService
            ->getRatingCsv(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->searchConditionTextAppService
            ->getRatingHeader(arg::cetera())
            ->willReturn([])
            ->shouldBeCalled();

        $startDateTime = '2019-01-01 05:00:00';
        $endDateTime = '2019-01-07 04:59:59';
        $regionId = '1';
        $channels = [1, 2, 3];
        $channelType = 'dt1';
        $division = 'ga12';
        $conditionCross = [];
        $csvFlag = '0';
        $draw = '1';
        $code = 'f2';
        $dataDivision = 'viewing_rate_share';
        $dataType = '0';
        $displayType = '';
        $aggregateType = '';
        $hour = 1;
        $sampleCountMaxNumber = 50;
        $userId = 1;
        $rdbDwhSearchPeriod = [];
        $baseDivision = [
            'ga8',
            'ga12',
            'ga10s',
            'gm',
            'oc',
        ];
        $intervalHourly = 100;
        $intervalMinutes = 60;

        $inputData = new InputData(
            $startDateTime,
            $endDateTime,
            $regionId,
            $channels,
            $channelType,
            $division,
            $conditionCross,
            $csvFlag,
            $draw,
            $code,
            $dataDivision,
            $dataType,
            $displayType,
            $aggregateType,
            $hour,
            $sampleCountMaxNumber,
            $userId,
            $rdbDwhSearchPeriod,
            $baseDivision,
            $intervalHourly,
            $intervalMinutes
        );

        $this->target->__invoke($inputData);
    }

    /**
     * @test
     */
    public function invoke_getTargetData(): void
    {
        $this->ratingPoint
            ->initDate(arg::cetera())
            ->willReturn([new Carbon('2019-01-01 05:00:00'), new Carbon('2019-01-07 04:59:59'), new Carbon('2019-01-01 05:00:00'), new Carbon('2019-01-07 04:59:59')])
            ->shouldBeCalled();

        $this->ratingPoint
            ->getChannelIds(arg::cetera())
            ->willReturn([])
            ->shouldBeCalled();

        $this->perMinutesDao
            ->getRatingData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->rdbPerMinutesDao
            ->getRatingData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->perMinutesDao
            ->getShareData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->rdbPerMinutesDao
            ->getShareData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->perMinutesDao
            ->getTargetData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->rdbPerMinutesDao
            ->getTargetData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->divisionService
            ->getCodeList(arg::cetera())
            ->willReturn([])
            ->shouldBeCalled();

        $this->holidayService
            ->getDateList(arg::cetera(arg::cetera()))
            ->willReturn([['date' => '2019-01-01 05:00:00', 'holidayFlag' => true]])
            ->shouldBeCalled();

        $output = new OutputData(
            [
                ['1:00', null, '', null, ''],
                ['1:01', null, '', null, ''],
                ['1:02', null, '', null, ''],
                ['1:03', null, '', null, ''],
                ['1:04', null, '', null, ''],
                ['1:05', null, '', null, ''],
                ['1:06', null, '', null, ''],
                ['1:07', null, '', null, ''],
                ['1:08', null, '', null, ''],
                ['1:09', null, '', null, ''],
                ['1:10', null, '', null, ''],
                ['1:11', null, '', null, ''],
                ['1:12', null, '', null, ''],
                ['1:13', null, '', null, ''],
                ['1:14', null, '', null, ''],
                ['1:15', null, '', null, ''],
                ['1:16', null, '', null, ''],
                ['1:17', null, '', null, ''],
                ['1:18', null, '', null, ''],
                ['1:19', null, '', null, ''],
                ['1:20', null, '', null, ''],
                ['1:21', null, '', null, ''],
                ['1:22', null, '', null, ''],
                ['1:23', null, '', null, ''],
                ['1:24', null, '', null, ''],
                ['1:25', null, '', null, ''],
                ['1:26', null, '', null, ''],
                ['1:27', null, '', null, ''],
                ['1:28', null, '', null, ''],
                ['1:29', null, '', null, ''],
                ['1:30', null, '', null, ''],
                ['1:31', null, '', null, ''],
                ['1:32', null, '', null, ''],
                ['1:33', null, '', null, ''],
                ['1:34', null, '', null, ''],
                ['1:35', null, '', null, ''],
                ['1:36', null, '', null, ''],
                ['1:37', null, '', null, ''],
                ['1:38', null, '', null, ''],
                ['1:39', null, '', null, ''],
                ['1:40', null, '', null, ''],
                ['1:41', null, '', null, ''],
                ['1:42', null, '', null, ''],
                ['1:43', null, '', null, ''],
                ['1:44', null, '', null, ''],
                ['1:45', null, '', null, ''],
                ['1:46', null, '', null, ''],
                ['1:47', null, '', null, ''],
                ['1:48', null, '', null, ''],
                ['1:49', null, '', null, ''],
                ['1:50', null, '', null, ''],
                ['1:51', null, '', null, ''],
                ['1:52', null, '', null, ''],
                ['1:53', null, '', null, ''],
                ['1:54', null, '', null, ''],
                ['1:55', null, '', null, ''],
                ['1:56', null, '', null, ''],
                ['1:57', null, '', null, ''],
                ['1:58', null, '', null, ''],
                ['1:59', null, '', null, ''],
                ['AVG', null, '', null, ''],
            ],
            '1',
            61,
            61,
            [['date' => '2019-01-01 05:00:00', 'holidayFlag' => true]],
            'dt2',
            '',
            '',
            '20190101',
            '20190107',
            []
        );

        $this->outputBoundary
            ->__invoke($output)
            ->shouldBeCalled();

        $this->searchConditionTextAppService
            ->getRatingCsv(arg::cetera())
            ->willReturn([])
            ->shouldBeCalled();

        $this->searchConditionTextAppService
            ->getRatingHeader(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $startDateTime = '2019-01-01 05:00:00';
        $endDateTime = '2019-01-07 04:59:59';
        $regionId = '2';
        $channels = [1, 2, 3];
        $channelType = 'dt2';
        $division = 'ga12';
        $conditionCross = [];
        $csvFlag = '1';
        $draw = '1';
        $code = 'f2';
        $dataDivision = 'target_content_household';
        $dataType = '0';
        $displayType = '';
        $aggregateType = '';
        $hour = 1;
        $sampleCountMaxNumber = 50;
        $userId = 1;
        $rdbDwhSearchPeriod = [];
        $baseDivision = [
            'ga8',
            'ga12',
            'ga10s',
            'gm',
            'oc',
        ];
        $intervalHourly = 100;
        $intervalMinutes = 60;

        $inputData = new InputData(
            $startDateTime,
            $endDateTime,
            $regionId,
            $channels,
            $channelType,
            $division,
            $conditionCross,
            $csvFlag,
            $draw,
            $code,
            $dataDivision,
            $dataType,
            $displayType,
            $aggregateType,
            $hour,
            $sampleCountMaxNumber,
            $userId,
            $rdbDwhSearchPeriod,
            $baseDivision,
            $intervalHourly,
            $intervalMinutes
        );

        $this->target->__invoke($inputData);
    }

    /**
     * @test
     */
    public function invoke_getTargetDataRegion1(): void
    {
        $this->ratingPoint
            ->initDate(arg::cetera())
            ->willReturn([new Carbon('2019-01-01 05:00:00'), new Carbon('2019-01-07 04:59:59'), new Carbon('2019-01-01 05:00:00'), new Carbon('2019-01-07 04:59:59')])
            ->shouldBeCalled();

        $this->ratingPoint
            ->getChannelIds(arg::cetera())
            ->willReturn([])
            ->shouldBeCalled();

        $this->perMinutesDao
            ->getRatingData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->rdbPerMinutesDao
            ->getRatingData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->perMinutesDao
            ->getShareData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->rdbPerMinutesDao
            ->getShareData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->perMinutesDao
            ->getTargetData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->rdbPerMinutesDao
            ->getTargetData(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $this->divisionService
            ->getCodeList(arg::cetera())
            ->willReturn([])
            ->shouldBeCalled();

        $this->holidayService
            ->getDateList(arg::cetera(arg::cetera()))
            ->willReturn([['date' => '2019-01-01 05:00:00', 'holidayFlag' => true]])
            ->shouldBeCalled();

        $output = new OutputData(
            [
                ['1:00', null, '', null, '', null, ''],
                ['1:01', null, '', null, '', null, ''],
                ['1:02', null, '', null, '', null, ''],
                ['1:03', null, '', null, '', null, ''],
                ['1:04', null, '', null, '', null, ''],
                ['1:05', null, '', null, '', null, ''],
                ['1:06', null, '', null, '', null, ''],
                ['1:07', null, '', null, '', null, ''],
                ['1:08', null, '', null, '', null, ''],
                ['1:09', null, '', null, '', null, ''],
                ['1:10', null, '', null, '', null, ''],
                ['1:11', null, '', null, '', null, ''],
                ['1:12', null, '', null, '', null, ''],
                ['1:13', null, '', null, '', null, ''],
                ['1:14', null, '', null, '', null, ''],
                ['1:15', null, '', null, '', null, ''],
                ['1:16', null, '', null, '', null, ''],
                ['1:17', null, '', null, '', null, ''],
                ['1:18', null, '', null, '', null, ''],
                ['1:19', null, '', null, '', null, ''],
                ['1:20', null, '', null, '', null, ''],
                ['1:21', null, '', null, '', null, ''],
                ['1:22', null, '', null, '', null, ''],
                ['1:23', null, '', null, '', null, ''],
                ['1:24', null, '', null, '', null, ''],
                ['1:25', null, '', null, '', null, ''],
                ['1:26', null, '', null, '', null, ''],
                ['1:27', null, '', null, '', null, ''],
                ['1:28', null, '', null, '', null, ''],
                ['1:29', null, '', null, '', null, ''],
                ['1:30', null, '', null, '', null, ''],
                ['1:31', null, '', null, '', null, ''],
                ['1:32', null, '', null, '', null, ''],
                ['1:33', null, '', null, '', null, ''],
                ['1:34', null, '', null, '', null, ''],
                ['1:35', null, '', null, '', null, ''],
                ['1:36', null, '', null, '', null, ''],
                ['1:37', null, '', null, '', null, ''],
                ['1:38', null, '', null, '', null, ''],
                ['1:39', null, '', null, '', null, ''],
                ['1:40', null, '', null, '', null, ''],
                ['1:41', null, '', null, '', null, ''],
                ['1:42', null, '', null, '', null, ''],
                ['1:43', null, '', null, '', null, ''],
                ['1:44', null, '', null, '', null, ''],
                ['1:45', null, '', null, '', null, ''],
                ['1:46', null, '', null, '', null, ''],
                ['1:47', null, '', null, '', null, ''],
                ['1:48', null, '', null, '', null, ''],
                ['1:49', null, '', null, '', null, ''],
                ['1:50', null, '', null, '', null, ''],
                ['1:51', null, '', null, '', null, ''],
                ['1:52', null, '', null, '', null, ''],
                ['1:53', null, '', null, '', null, ''],
                ['1:54', null, '', null, '', null, ''],
                ['1:55', null, '', null, '', null, ''],
                ['1:56', null, '', null, '', null, ''],
                ['1:57', null, '', null, '', null, ''],
                ['1:58', null, '', null, '', null, ''],
                ['1:59', null, '', null, '', null, ''],
                ['AVG', null, '', null, '', null, ''],
            ],
            '1',
            61,
            61,
            [['date' => '2019-01-01 05:00:00', 'holidayFlag' => true]],
            'dt2',
            '',
            '',
            '20190101',
            '20190107',
            []
        );

        $this->outputBoundary
            ->__invoke($output)
            ->shouldBeCalled();

        $this->searchConditionTextAppService
            ->getRatingCsv(arg::cetera())
            ->willReturn([])
            ->shouldBeCalled();

        $this->searchConditionTextAppService
            ->getRatingHeader(arg::cetera())
            ->willReturn([])
            ->shouldNotBeCalled();

        $startDateTime = '2019-01-01 05:00:00';
        $endDateTime = '2019-01-07 04:59:59';
        $regionId = '1';
        $channels = [1, 2, 3];
        $channelType = 'dt2';
        $division = 'ga12';
        $conditionCross = [];
        $csvFlag = '1';
        $draw = '1';
        $code = 'f2';
        $dataDivision = 'target_content_household';
        $dataType = '0';
        $displayType = '';
        $aggregateType = '';
        $hour = 1;
        $sampleCountMaxNumber = 50;
        $userId = 1;
        $rdbDwhSearchPeriod = [];
        $baseDivision = [
            'ga8',
            'ga12',
            'ga10s',
            'gm',
            'oc',
        ];
        $intervalHourly = 100;
        $intervalMinutes = 60;

        $inputData = new InputData(
            $startDateTime,
            $endDateTime,
            $regionId,
            $channels,
            $channelType,
            $division,
            $conditionCross,
            $csvFlag,
            $draw,
            $code,
            $dataDivision,
            $dataType,
            $displayType,
            $aggregateType,
            $hour,
            $sampleCountMaxNumber,
            $userId,
            $rdbDwhSearchPeriod,
            $baseDivision,
            $intervalHourly,
            $intervalMinutes
        );

        $this->target->__invoke($inputData);
    }
}
